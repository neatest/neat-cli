symlink:
  - .github/workflows/cli.yml: actions/cli.yml
  - README.md: README.tpl.md

pre-run:
  - script: |
      // Save existing readme (if any)
      if(fs.existsSync('README.md')) fs.renameSync('README.md','_README.md.backup')

      // Use current dir as default for NPM package name
      process.env.NEAT_ASK_NPM_NAME = process.cwd().match(/\/([^/]*)$/)[1]

ask:
  - id: npm-name
    description: What is the name of your NPM package? ('name' format or '@scope/name' format)
    replace: true
  - id: npm-access
    description: Is this a public or a private package? (You need to have a NPM subscription for private packages)
    default: [public, private]
  - id: cli-type
    description: What type of cli do you want? Single is like 'ls' and 'curl'. Multi is like 'git' or 'homebrew'.
    default: [single, multi]
  - id: repo-name
    description: What is the name of your repository (in the format owner/repo)?
    replace: true
  - id: cli-builds
    description: On which operating systems do you want to test your build?
    replace: true
    default:
      - ubuntu-latest: true
      - windows-latest: true
      - macos-latest: true

pre-download:
  - npx oclif $NEAT_ASK_CLI_TYPE --options=yarn,typescript,eslint,mocha --defaults
  - script: |
      // Restore Readme
      if(fs.existsSync('_README.md.backup')) fs.renameSync('_README.md.backup','README.md')
      else fs.unlinkSync('README.md')

inject:
  - id: cli-contribute
    file: inject/contribute.md
    target: [README.md, docs/CONTRIBUTE.md]
    after: <!-- project-contributing -->
  - id: project-installation
    file: inject/installation.md
    target: README.md
  - id: cli-usage
    file: inject/usage.md
    target: README.md
    after: <!-- project-usage -->
  - id: cli-output
    command: ./bin/run --help
    wrap:
      before: |
        <!-- cli-output -->

        ```sh
      after: |

        ```
        <!-- cli-output -->
    target: README.md

post-run:
  - script: |
      if (fs.existsSync('package.json')) {
        const pkgFile = JSON.parse(fs.readFileSync('package.json'))

        // Change to correct NPM package name
        pkgFile.name = process.env.NEAT_ASK_NPM_NAME

        // Make sure oclif doesn't mess with Readme
        delete pkgFile.scripts.version
        pkgFile.scripts.prepack = "rm -rf lib && tsc -b"

        // Define package access
        pkgFile.publishConfig =  { access: process.env.NEAT_ASK_NPM_ACCESS }

        // Use repo name where relevant
        const repoName = process.env.NEAT_ASK_REPO_NAME
        pkgFile.repository = repoName
        pkgFile.homepage = `https://github.com/${repoName}`
        pkgFile.bugs =  `https://github.com/${repoName}/issues`

        fs.writeFileSync('package.json', JSON.stringify(pkgFile, null, 2))
      }

ignore: [actions, inject]
